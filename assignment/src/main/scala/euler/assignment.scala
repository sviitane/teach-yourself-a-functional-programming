package euler

object ProjectEuler {
  /*
   * Even Fibonacci numbers
   *
   * Each new term in the Fibonacci sequence is generated by adding the previous
   * two terms. By starting with 1 and 2, the first 10 terms will be:
   *
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   *
   * By considering the terms in the Fibonacci sequence whose values do not
   * exceed four million, find the sum of the even-valued terms.
   */
   def problem2(): Int = {
	  def fib(sum:Int, a:Int, b:Int): Int = {
	    if(sum<4000000){
	      if((a+b) % 2 == 0){
	        fib(sum + (a+b), b, (a+b))
	      }else{
	    	fib(sum, b, (a+b))
	      }
	    }else{
	      sum
	    }
	  }
	  fib(0,0,1)
	}

  /*
   * Largest palindrome product
   *
   * A palindromic number reads the same both ways. The largest palindrome made
   * from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
   *
   * Find the largest palindrome made from the product of two 3-digit numbers.
   *
   */
  	def problem4(): Int = {
	  def pal(min: Int, max: Int): Int = {
	  val r = (min to max).view
			  // Flatten map so it puts the values in a single list instead of making a listOfListOfInts
			  .flatMap(i => (i to max).map(i *))
			  // Filter only the ones that are palendromes in the list
			  .filter(n => n.toString == n.toString.reverse)
			  // Return the biggest value in the list
			  .max
			  
			  r
	  }
	  pal(100, 999)
	}

  /*
   * Special Pythagorean triplet
   *
   * A Pythagorean triplet is a set of three natural numbers, a < b < c, for
   * which, a^2 + b^2 = c^2
   *
   * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
   *
   * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
   * Find the product abc.
   */
	def problem9(): Int = {
	  def triplet(max: Int): Int = {
		  // We can make a for comprehension where a starts from one to b, and 
		  // b starts from 2 to 1000 and c is 1000 - a - b and also check if
		  // a^2 + b^2 == c^2, if this is true, we add a*b*c to the list triplets
		  val triplets = for(b <- 2 to max; a <- 1 to b; c = max - a - b
	             if a * a + b * b  == c * c) yield a * b * c
	
	      // Since there is only one element in our list, we can just call head, but this only works in this case
	      val t = triplets.head
	      
	      t
	  }
	  triplet(1000)
	} 
	/*
   * Maximum path sum I
   *
   * By starting at the top of the triangle below and moving to adjacent numbers
   * on the row below, the maximum total from top to bottom is 23.
   *
   *      3
   *     7 4
   *    2 4 6
   *   8 5 9 3
   *
   * That is, 3 + 7 + 4 + 9 = 23.
   *
   * Find the maximum total from top to bottom of the given triangle with 15
   * rows:
   */
  def problem18(triangle: List[List[Int]]): Int = ???

  /*
   * Maximum path sum II
   *
   * By starting at the top of the triangle below and moving to adjacent numbers
   * on the row below, the maximum total from top to bottom is 23.
   *
   *    3
   *   7 4
   *  2 4 6
   * 8 5 9 3
   *
   * That is, 3 + 7 + 4 + 9 = 23.
   *
   * Find the maximum total from top to bottom in the given triangle with
   * one-hundred rows.
   *
   * NOTE: This is a much more difficult version of Problem 18. It is not
   * possible to try every route to solve this problem, as there are 2^99
   * altogether! If you could check one trillion (10^12) routes every second it
   * would take over twenty billion years to check them all. There is an
   * efficient algorithm to solve it. ;o)
   */
  def problem67(triangle: List[List[Int]]): Int = ???
}
